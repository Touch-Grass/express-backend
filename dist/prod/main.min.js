const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const passport = require('passport');
const LocalStrategy = require('passport-local');
const session = require('express-session');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const app = express(),
  port = process.env.PORT || 8080;
app.use(session({ secret: 'abdofjadfjaofijdsoafaiosdjf', resave: !1, saveUninitialized: !1 })),
  app.use(cors()),
  app.use(bodyParser.json()),
  app.use(passport.initialize()),
  app.use(passport.session());
const userSchema = new mongoose.Schema({ username: String, password: String });
const chatRouter = express.Router();
chatRouter.get('/', (t, e) => {
  t.isAuthenticated()
    ? e.send({ message: 'Authenticated', status: 200 })
    : e.json({ message: 'Not Authenticated', status: 401 });
});
const indexRouter = express.Router();
indexRouter.get('/', (e, o) => {
  o.setHeader('Access-Control-Allow-Origin', '*'), o.json({ message: 'hello, world' });
}),
  indexRouter.post('/', (e, o) => {
    console.log('got request', e.body),
      o.setHeader('Access-Control-Request-Headers', '*'),
      o.json({ message: 'Hi', body: e.body });
  });
const loginRouter = express.Router(),
  User = mongoose.model('userSchema', userSchema);
loginRouter.get('/', (e, o) => {
  e.isAuthenticated()
    ? o.send({ message: e.user + ' already logged in', status: 200 })
    : o.json({ message: 'Not logged in! Please login', status: 401 });
}),
  passport.use(
    new LocalStrategy((e, o, r) => {
      User.findOne({ username: e }, (e, s) =>
        e
          ? r(e)
          : s
          ? void bcrypt.compare(o, s.password, (e, o) =>
              e ? r(e) : o ? r(null, s) : r(null, !1, { message: 'Incorrect password.' })
            )
          : r(null, !1, { message: 'Incorrect username or password.' })
      );
    })
  ),
  loginRouter.post('/login', (e, o, s) => {
    o.send('Logged in');
  });
const testrouter = express.Router();
testrouter.get('/', (e, r) => {
  r.send('Hello World!');
});
app.use('/test', testrouter),
  app.use('/', indexRouter),
  app.use('/chat', chatRouter),
  app.use('/login', loginRouter),
  app.listen(port, () => console.log('server started at http://localhost:' + port));
mongoose.connect('mongodb://mongo:ISRP4uOlwo1Pg39gGJTo@containers-us-west-149.railway.app:6320');
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:')),
  db.once('open', () => {
    console.log('Connected to MongoDB');
  }),
  1 === db.readyState ? console.log('MongoDB connection is open') : console.log('MongoDB connection is closed');
passport.use(
  new LocalStrategy((s, r, e) =>
    e(null, 'user' === s && 'password' === r && { username: 'user', password: 'password' })
  )
),
  passport.serializeUser((s, r) => {
    'username' in s ? r(null, s.username) : r(new Error('Unable to serialize user'));
  }),
  passport.deserializeUser((s, r) => {
    r(null, { username: s });
  });
app.use((t, a) => {
  a.status(404).send("Sorry can't find that!");
}),
  app.use((t, a) => {
    a.status(500).send("Sorry can't find that!");
  });
